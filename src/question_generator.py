import asyncio
from dotenv import load_dotenv
load_dotenv()

from .utils import get_today_str, tavily_search, think_tool, console, init_xai_model
from .persona_prompts import MRT_QUESTION_GENERATOR_PROMPT
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from .config import BOSS_MODEL, BOSS_TEMPERATURE, QUESTION_GENERATOR_MAX_TOOL_CALL_ITERATIONS
from pydantic import BaseModel, Field
from typing import List

# Pydantic model for structured question extraction
class StrategicQuestions(BaseModel):
    """Schema for structured question extraction from MrT's response."""
    questions: List[str] = Field(
        description="List of strategic research questions generated by MrT",
        min_items=1
    )

class QuestionGenerator:
    """Simple AI agent that thinks, searches web, and generates strategic questions in MrT style."""

    def __init__(self, max_tool_call_iterations: int = 3):
        console.print(Panel("[bold green]🎯 Initializing MrT Question Generator[/bold green]", border_style="green"))

        self.model = init_xai_model(
            model=BOSS_MODEL,
            temperature=BOSS_TEMPERATURE,
            max_tokens=8000
        )
        self.tools = [think_tool, tavily_search]
        self.model_with_tools = self.model.bind_tools(self.tools)
        self.max_tool_call_iterations = max_tool_call_iterations

        # Initialize separate structured output model for question extraction
        self.structured_output_model = self.model.with_structured_output(StrategicQuestions)

        console.print(f"[dim]Using model: {BOSS_MODEL}[/dim]")
        console.print(f"[dim]Max iterations: {QUESTION_GENERATOR_MAX_TOOL_CALL_ITERATIONS}[/dim]")

        self.tools_by_name = {tool.name: tool for tool in self.tools}
        self.generated_questions = []

    async def generate_questions(self, topic: str, num_output_questions: int = 10) -> list[str]:
        """Generate strategic questions about a topic using MrT persona.

        Args:
            topic: The research topic to generate questions about
            num_output_questions: Number of questions to generate (default: 10)

        Returns:
            List of generated strategic questions
        """
        console.print(Panel(
            f"[bold green]🎯 Generating {num_output_questions} Strategic Questions[/bold green]\n\nTopic: {topic}",
            border_style="green"
        ))

        # Create system message with MrT persona
        system_prompt = MRT_QUESTION_GENERATOR_PROMPT.format(
            num_questions=num_output_questions,
            date=get_today_str()
        )

        # Initialize messages
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"Topic: {topic}\n\nPlease research this topic and generate {num_output_questions} strategic questions that would drive valuable research for MoMo's business strategy."}
        ]

        console.print("[dim]MrT analyzing topic and planning question generation approach...[/dim]")
        response = await self.model_with_tools.ainvoke(messages)
        messages.append({"role": "assistant", "content": response.content, "tool_calls": response.tool_calls or []})

        tool_call_iterations = 0

        while response.tool_calls and tool_call_iterations < self.max_tool_call_iterations:
            tool_call_iterations += 1
            console.print(f"\n[cyan]🔄 Research Iteration {tool_call_iterations}/{self.max_tool_call_iterations}[/cyan]")

            observations = []
            for tool_call in response.tool_calls:
                tool = self.tools_by_name[tool_call["name"]]
                tool_name = tool_call["name"]

                if tool_name == "think_tool":
                    console.print(f"[magenta]💭 MrT Thinking: {tool_call['args']['reflection'][:100]}...[/magenta]")
                elif tool_name == "tavily_search":
                    console.print(f"[blue]🔍 MrT Searching: \"{tool_call['args']['query']}\"[/blue]")

                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=console,
                    transient=True,
                ) as progress:
                    task = progress.add_task(f"[cyan]Executing {tool_name}...", total=None)
                    result = await tool.ainvoke(tool_call["args"])
                    progress.update(task, completed=True)
                    observations.append(result)

                if tool_name == "tavily_search":
                    console.print(f"[dim green]✅ Found relevant information[/dim green]")

            # Add tool results to messages
            for observation, tool_call in zip(observations, response.tool_calls):
                messages.append({
                    "role": "tool",
                    "content": str(observation),
                    "tool_call_id": tool_call["id"]
                })

            console.print("[dim]MrT analyzing findings and refining questions...[/dim]")
            response = await self.model_with_tools.ainvoke(messages)
            messages.append({"role": "assistant", "content": response.content, "tool_calls": response.tool_calls or []})

        # Extract final questions using structured output
        final_content = str(response.content)
        console.print(Panel(
            f"[bold green]✨ MrT Question Generation Complete[/bold green]\n\n{final_content}",
            border_style="green"
        ))

        # Extract questions using structured output
        questions = await self._extract_questions_from_response(final_content, num_output_questions)
        self.generated_questions = questions

        return questions

    async def _extract_questions_from_response(self, response_content: str, num_questions: int) -> List[str]:
        """Extract questions from the model's response using structured output."""
        console.print("[yellow]📝 Extracting questions using structured output...[/yellow]")

        extraction_prompt = f"""Based on the following MrT research content, extract exactly {num_questions} strategic questions that are clear, actionable, and focused on business research.

Research Content:
{response_content}

Extract the {num_questions} most strategic and well-formed questions from this content. Each question should:
- Be clear and specific
- Focus on business strategy and research
- Be actionable for research teams
- Follow MoMo's strategic framework (financial inclusion, innovation, business growth)

Return exactly {num_questions} questions."""

        try:
            # Use structured output to extract questions
            structured_response = await self.structured_output_model.ainvoke([
                {"role": "system", "content": "You are an expert at extracting strategic questions from research content."},
                {"role": "user", "content": extraction_prompt}
            ])

            extracted_questions = structured_response.questions
            console.print(f"[green]✅ Extracted {len(extracted_questions)} strategic questions using structured output[/green]")

            # Ensure we have the right number of questions
            if len(extracted_questions) > num_questions:
                extracted_questions = extracted_questions[:num_questions]
            elif len(extracted_questions) < num_questions:
                console.print(f"[yellow]⚠️ Only extracted {len(extracted_questions)} questions, expected {num_questions}[/yellow]")

            return extracted_questions

        except Exception as e:
            console.print(f"[red]❌ Error in structured extraction: {e}[/red]")
            console.print("[yellow]Falling back to simple text parsing...[/yellow]")

            # Fallback to simple extraction
            return self._simple_extract_questions(response_content)

# Demo/Test function
async def main():
    console.print("[bold]═" * 80 + "[/bold]")
    console.print(Panel("[bold green]MrT Question Generator - Demo Mode[/bold green]", border_style="green"))
    console.print("[bold]═" * 80 + "[/bold]")

    # Test the question generator
    generator = QuestionGenerator(max_tool_call_iterations=3)

    test_topic = "Digital banking trends in Southeast Asia and their impact on financial inclusion"
    num_questions = 5  # Generate 5 questions for demo

    questions = await generator.generate_questions(test_topic, num_questions)

    console.print("\n[bold]═" * 80 + "[/bold]")
    console.print(Panel(f"[bold cyan]🎯 Generated {len(questions)} Strategic Questions[/bold cyan]", border_style="cyan"))

    for i, question in enumerate(questions, 1):
        console.print(f"[cyan]{i}.[/cyan] {question}")

    console.print("[bold]═" * 80 + "[/bold]")

if __name__ == "__main__":
    asyncio.run(main())